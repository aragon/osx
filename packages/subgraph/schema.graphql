# Types

# Token

interface Token {
  id: ID! # use address as id
  name: String
  symbol: String
}

type ERC20Contract implements Token @entity(immutable: true) {
  id: ID! # use address as id
  name: String
  symbol: String
  decimals: Int!
}

type ERC721Contract implements Token @entity(immutable: true) {
  id: ID! # use address as id
  name: String
  symbol: String
}

# Token Balances
interface TokenBalance {
  id: ID! # dao address + token address
  dao: Dao!
  lastUpdated: BigInt!
}

type ERC20Balance implements TokenBalance @entity {
  id: ID!
  token: ERC20Contract!
  dao: Dao!
  balance: BigInt!
  lastUpdated: BigInt!
}

type NativeBalance implements TokenBalance @entity {
  id: ID!
  dao: Dao!
  balance: BigInt!
  lastUpdated: BigInt!
}

type ERC721Balance implements TokenBalance @entity {
  id: ID!
  token: ERC721Contract!
  dao: Dao!
  tokenIds: [BigInt!]!
  lastUpdated: BigInt!
}

# Token Transfers

enum TransferType {
  ExternalTransfer # when from/to are both NOT equal to dao.
  Withdraw
  Deposit
}

interface TokenTransfer {
  id: ID!
  dao: Dao!
  from: Bytes!
  to: Bytes!
  type: TransferType!
  proposal: Proposal
  txHash: Bytes!
  createdAt: BigInt!
}

type ERC20Transfer implements TokenTransfer @entity(immutable: true) {
  id: ID!
  dao: Dao!
  token: ERC20Contract!
  amount: BigInt!
  from: Bytes!
  to: Bytes!
  proposal: Proposal
  type: TransferType!
  txHash: Bytes!
  createdAt: BigInt!
}

type ERC721Transfer implements TokenTransfer @entity(immutable: true) {
  id: ID!
  dao: Dao!
  token: ERC721Contract!
  tokenId: BigInt!
  from: Bytes!
  to: Bytes!
  proposal: Proposal
  type: TransferType!
  txHash: Bytes!
  createdAt: BigInt!
}

type NativeTransfer implements TokenTransfer @entity(immutable: true) {
  id: ID!
  dao: Dao!
  amount: BigInt!
  from: Bytes!
  to: Bytes!
  reference: String!
  proposal: Proposal
  type: TransferType!
  txHash: Bytes!
  createdAt: BigInt!
}

# ACL

type ContractPermissionId @entity(immutable: true) {
  id: ID! # where + permissionId
  dao: Dao!
  where: Bytes!
  permissionId: Bytes!
}

type Permission @entity(immutable: true) {
  "no need to store granted as we can delete permission when revoked"
  id: ID! # where + permissionId + who
  dao: Dao!
  where: Bytes!
  contractPermissionId: ContractPermissionId!
  who: Bytes!
  actor: Bytes!
  condition: Bytes
}

# Executions

type Action @entity {
  id: ID!
  to: Bytes!
  value: BigInt!
  data: Bytes!
  dao: Dao!
  proposal: Proposal!
  execResult: Bytes
}

type StandardCallback @entity {
  id: ID!
  dao: Dao!
  interfaceId: Bytes!
  callbackSelector: Bytes!
  magicNumber: Bytes!
}

# Dao

type Dao @entity {
  id: ID! # use address as id
  subdomain: String
  creator: Bytes!
  metadata: String
  createdAt: BigInt!
  token: ERC20Contract
  actions: [Action!]! @derivedFrom(field: "dao")
  transfers: [TokenTransfer!]! @derivedFrom(field: "dao")
  balances: [TokenBalance!]! @derivedFrom(field: "dao")
  contractPermissionIds: [ContractPermissionId!]! @derivedFrom(field: "dao")
  permissions: [Permission!]! @derivedFrom(field: "dao")
  pluginInstallations: [PluginInstallation!]! @derivedFrom(field: "dao")
  plugins: [IPluginInstallation!]! @derivedFrom(field: "dao") # TODO: Delete or refactor after the plugins left the Aragon OSx subgraph
  proposals: [Proposal!] @derivedFrom(field: "dao")
  trustedForwarder: Bytes
  signatureValidator: Bytes
  standardCallbacks: [StandardCallback!] @derivedFrom(field: "dao")
}

# Plugins

type PluginRepo @entity(immutable: true) {
  id: ID! # address
  subdomain: String!
  versions: [PluginVersion!]! @derivedFrom(field: "pluginRepo")
  # Holds all preparations. Also applied ones.
  preparations: [PluginPreparation!]! @derivedFrom(field: "pluginRepo")
  # Holds all installed and uninstalled installations.
  installations: [PluginInstallation!] @derivedFrom(field: "appliedPluginRepo")
}

type PluginSetup @entity(immutable: true) {
  id: ID! # contract address
  versions: [PluginVersion!]! @derivedFrom(field: "pluginSetup")
}

type PluginVersion @entity(immutable: true) {
  id: ID! # pluginRepo + release + build
  pluginRepo: PluginRepo!
  pluginSetup: PluginSetup
  release: Int!
  build: Int!
  metadata: Bytes!
  # Holds all preparations. Also applied ones.
  preparations: [PluginPreparation!]! @derivedFrom(field: "pluginVersion")
  # Holds all installed and uninstalled installations.
  installations: [PluginInstallation!] @derivedFrom(field: "appliedVersion")
}

type PluginPermission @entity(immutable: true) {
  id: ID! # PluginPreparation + operation + where + who + permissionId
  pluginPreparation: PluginPreparation!
  operation: PermissionOperation!
  where: Bytes!
  who: Bytes!
  condition: Bytes
  permissionId: Bytes!
}

enum PermissionOperation {
  Grant
  Revoke
  GrantWithCondition
}

type PluginPreparation @entity(immutable: true) {
  id: ID! # psp setupId + installationId
  installation: PluginInstallation!
  creator: Bytes!
  dao: Dao!
  preparedSetupId: Bytes! # the psp setupId
  pluginRepo: PluginRepo!
  pluginVersion: PluginVersion!
  data: Bytes
  pluginAddress: Bytes!
  helpers: [Bytes!]!
  permissions: [PluginPermission!]! @derivedFrom(field: "pluginPreparation")
  type: PluginPreparationType!
}

# Don't implement IPluginInstallation. Otherwise it would show up under plugins in the DAO entity
type PluginInstallation @entity {
  id: ID! # psp installationId
  dao: Dao!
  pluginAddress: Bytes # The plugin address provided by the applied preparation
  appliedPreparation: PluginPreparation
  appliedSetupId: Bytes # The setupId of the application see PSP documentation for more info
  appliedVersion: PluginVersion # Stored to track installations in the different plugin versions
  appliedPluginRepo: PluginRepo # Stored to track installation in the different plugin repos
  preparations: [PluginPreparation!]! @derivedFrom(field: "installation")
  state: PluginPreparationState!
}

enum PluginPreparationType {
  Installation
  Update
}

enum PluginPreparationState {
  InstallationPrepared
  Installed
  UpdatePrepared
  UninstallPrepared
  Uninstalled
}

interface IPluginInstallation {
  id: ID! # psp installationId
  dao: Dao!
  pluginAddress: Bytes!

  # TODO: Uncomment as soon as the plugins have their own subgraph
  # appliedPreparation: PluginPreparation
  # appliedSetupId: Bytes # The setupId of the application see PSP documentation for more info
  # preparations: [PluginPreparation!]! @derivedFrom(field: "plugin")
  # state: PluginPreparationState!
}

### Entities below should move to there respective subgraph once plugin is seperated from the Aragon OSx
# Proposal

interface Proposal {
  id: ID! # package + proposalId
  dao: Dao!
  creator: Bytes!
  metadata: String
  actions: [Action!]! @derivedFrom(field: "proposal")
  allowFailureMap: BigInt!
  executed: Boolean!
  createdAt: BigInt!
  startDate: BigInt!
  endDate: BigInt!
  executionTxHash: Bytes
}

# Voting

enum VoteOption {
  None
  Abstain
  Yes
  No
}

enum VotingMode {
  Standard
  EarlyExecution
  VoteReplacement
}

# TokenVoting

type TokenVotingPlugin implements IPluginInstallation @entity {
  "TODO: attributes should be appended to Plugins once plugin is separated from Aragon OSx"
  id: ID!
  dao: Dao!
  pluginAddress: Bytes!

  proposals: [TokenVotingProposal!]! @derivedFrom(field: "plugin")
  votingMode: VotingMode
  supportThreshold: BigInt
  minParticipation: BigInt
  minDuration: BigInt
  minProposerVotingPower: BigInt
  proposalCount: BigInt
  token: Token
  members: [TokenVotingMember!]! @derivedFrom(field: "plugin")
}

type TokenVotingMember @entity {
  id: ID! # user address + TokenVotingPlugin pluginId.
  address: Bytes!
  balance: BigInt!
  plugin: TokenVotingPlugin!
}

type TokenVotingVoter @entity {
  id: ID! # address
  address: String # address as string to facilitate filtering by address on the UI
  proposals: [TokenVotingVote!]! @derivedFrom(field: "voter")
  plugin: TokenVotingPlugin!
  lastUpdated: BigInt
}

type TokenVotingVote @entity {
  "VoterProposal for Many-to-Many"
  id: ID! # voter + proposal
  voter: TokenVotingVoter!
  proposal: TokenVotingProposal!
  voteOption: VoteOption!
  votingPower: BigInt!
  createdAt: BigInt!
  voteReplaced: Boolean!
  updatedAt: BigInt!
}

type TokenVotingProposal implements Proposal @entity {
  id: ID! # package + proposalId
  dao: Dao!
  actions: [Action!]! @derivedFrom(field: "proposal")
  allowFailureMap: BigInt!
  plugin: TokenVotingPlugin!
  proposalId: BigInt!
  creator: Bytes!
  metadata: String

  votingMode: VotingMode!
  supportThreshold: BigInt!
  minVotingPower: BigInt!
  snapshotBlock: BigInt!

  yes: BigInt
  no: BigInt
  abstain: BigInt
  castedVotingPower: BigInt
  totalVotingPower: BigInt!

  voters: [TokenVotingVote!]! @derivedFrom(field: "proposal")
  open: Boolean!
  executed: Boolean!
  createdAt: BigInt!
  startDate: BigInt!
  endDate: BigInt!
  creationBlockNumber: BigInt!
  executable: Boolean
  executionDate: BigInt
  executionBlockNumber: BigInt
  executionTxHash: Bytes
}

# AddresslistVoting

type AddresslistVotingPlugin implements IPluginInstallation @entity {
  "TODO: attributes should be appended to Plugin once plugin is seperated from Aragon OSx"
  id: ID!
  dao: Dao!
  pluginAddress: Bytes!

  proposals: [AddresslistVotingProposal!]! @derivedFrom(field: "plugin")
  votingMode: VotingMode
  supportThreshold: BigInt
  minParticipation: BigInt
  minDuration: BigInt
  minProposerVotingPower: BigInt
  proposalCount: BigInt
  members: [AddresslistVotingVoter!]! @derivedFrom(field: "plugin")
}

type AddresslistVotingVoter @entity {
  id: ID! # address
  address: String # address as string to facilitate filtering by address on the UI
  proposals: [AddresslistVotingVote!]! @derivedFrom(field: "voter")
  plugin: AddresslistVotingPlugin!
}

type AddresslistVotingVote @entity {
  "VoterProposal for Many-to-Many"
  id: ID! # voter + proposal
  voter: AddresslistVotingVoter!
  proposal: AddresslistVotingProposal!
  voteOption: VoteOption!
  votingPower: BigInt!
  createdAt: BigInt!
  voteReplaced: Boolean!
  updatedAt: BigInt!
}

type AddresslistVotingProposal implements Proposal @entity {
  id: ID! # package + proposalId
  dao: Dao!
  actions: [Action!]! @derivedFrom(field: "proposal")
  allowFailureMap: BigInt!
  plugin: AddresslistVotingPlugin!
  proposalId: BigInt!
  creator: Bytes!
  metadata: String

  votingMode: VotingMode!
  supportThreshold: BigInt!
  minVotingPower: BigInt!
  snapshotBlock: BigInt!

  abstain: BigInt
  yes: BigInt
  no: BigInt
  castedVotingPower: BigInt
  totalVotingPower: BigInt!

  voters: [AddresslistVotingVote!]! @derivedFrom(field: "proposal")
  open: Boolean!
  executed: Boolean!
  createdAt: BigInt!
  startDate: BigInt!
  endDate: BigInt!
  creationBlockNumber: BigInt!
  executable: Boolean
  executionDate: BigInt
  executionBlockNumber: BigInt
  executionTxHash: Bytes
}

# Admin (plugin)

type AdminPlugin implements IPluginInstallation @entity {
  "TODO: attributes should be appended to Plugin once plugin is separated from Aragon OSx"
  id: ID!
  dao: Dao!
  pluginAddress: Bytes!

  proposals: [AdminProposal!]! @derivedFrom(field: "plugin")
  administrators: [AdministratorAdminPlugin!]! @derivedFrom(field: "plugin")
}

type Administrator @entity(immutable: true) {
  id: ID! # address
  address: String # address as string to facilitate filtering by address on the UI
  proposals: [AdminProposal!]! @derivedFrom(field: "administrator")
  plugins: [AdministratorAdminPlugin!]! @derivedFrom(field: "administrator")
}

type AdministratorAdminPlugin @entity {
  "for Many-to-Many"
  id: ID! # Administrator + plugin
  administrator: Administrator!
  plugin: AdminPlugin!
}

type AdminProposal implements Proposal @entity {
  id: ID! # plugin + proposalId
  dao: Dao!
  creator: Bytes! # Administrator address
  metadata: String
  actions: [Action!]! @derivedFrom(field: "proposal")
  allowFailureMap: BigInt!
  executed: Boolean!
  createdAt: BigInt!
  startDate: BigInt!
  endDate: BigInt!
  plugin: AdminPlugin!
  proposalId: BigInt!
  administrator: Administrator!
  executionTxHash: Bytes
}

# Multisig

type MultisigPlugin implements IPluginInstallation @entity {
  "TODO: attributes should be appended to Plugin once plugin is seperated from Aragon OSx"
  id: ID!
  dao: Dao!
  pluginAddress: Bytes!

  proposalCount: BigInt
  proposals: [MultisigProposal!]! @derivedFrom(field: "plugin")
  members: [MultisigApprover!]! @derivedFrom(field: "plugin")

  # multisig settings
  minApprovals: BigInt
  onlyListed: Boolean!
}

type MultisigApprover @entity {
  id: ID! # plugin_address + member_address
  address: String # address as string to facilitate filtering by address on the UI
  proposals: [MultisigProposalApprover!]! @derivedFrom(field: "approver")
  plugin: MultisigPlugin!
}

type MultisigProposalApprover @entity(immutable: true) {
  "ApproverProposal for Many-to-Many"
  id: ID! # approver + proposal
  approver: MultisigApprover!
  proposal: MultisigProposal!
  createdAt: BigInt!
}

type MultisigProposal implements Proposal @entity {
  id: ID! # plugin + proposalId
  dao: Dao!
  actions: [Action!]! @derivedFrom(field: "proposal")
  allowFailureMap: BigInt!
  plugin: MultisigPlugin!
  proposalId: BigInt!
  creator: Bytes!
  metadata: String
  createdAt: BigInt!
  startDate: BigInt!
  endDate: BigInt!
  creationBlockNumber: BigInt!
  snapshotBlock: BigInt!
  minApprovals: Int!
  approvals: Int
  executable: Boolean!
  executed: Boolean!
  executionDate: BigInt
  executionBlockNumber: BigInt
  executionTxHash: Bytes
  approvers: [MultisigProposalApprover!]! @derivedFrom(field: "proposal")
}
