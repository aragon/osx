# Types

#############################
########## Token ############
#############################

"""
Interface representing a generic token.
Tokens implementing this interface are expected to provide certain standard properties and functionalities.
"""
interface Token {
  " Smart Contract address of the token "
  id: ID!

  " Name of the token, mirrored from the smart contract "
  name: String

  " Symbol of the token, mirrored from the smart contract "
  symbol: String
}

"""
ERC20 Token Standard, type of Token. https://eips.ethereum.org/EIPS/eip-20
"""
type ERC20Contract implements Token @entity(immutable: true) {
  " Smart Contract address of the token "
  id: ID!

  " Name of the token, mirrored from the smart contract "
  name: String

  " Symbol of the token, mirrored from the smart contract "
  symbol: String

  " Number of decimals of the token, mirrored from the smart contract "
  decimals: Int!
}

"""
A wrapper contract representing an ERC20 Token.
"""
type ERC20WrapperContract implements Token @entity(immutable: true) {
  " Smart contract address of the token "
  id: ID!

  " Name of the token, mirrored from the smart contract "
  name: String

  " Symbol of the token, mirrored from the smart contract "
  symbol: String

  " Number of decimals of the token, mirrored from the smart contract "
  decimals: Int!

  " The underlying ERC20 contract this wrapper represents "
  underlyingToken: ERC20Contract!
}

"""
ERC721 Token Standard, Non-Fungible Token (NFT), type of Token. https://eips.ethereum.org/EIPS/eip-721
"""
type ERC721Contract implements Token @entity(immutable: true) {
  " Address of the ERC721 Token Smart Contract "
  id: ID!

  " Name of the ERC721 Token "
  name: String

  " Symbol of the ERC721 Token "
  symbol: String
}

"""
ERC1155 Multi-Token Standard, fungible, non-fungible, and semi-fungible tokens all in one contract,
type of Token. https://eips.ethereum.org/EIPS/eip-1155
"""
type ERC1155Contract implements Token @entity(immutable: true) {
  " Address of the ERC1155 Token Smart Contract "
  id: ID!

  " Name of the ERC1155 Token Smart Contract "
  name: String

  " Symbol of the ERC1155 Token Smart Contract "
  symbol: String
}

###########################
##### Token Balances ######
###########################

"""
Interface representing a generic token balance.
Balances implementing this interface are expected to provide certain standard properties and functionalities.
"""
interface TokenBalance {
  " Concatenation of DAO Smart contract address and Token Smart contract address using '_' "
  id: ID!

  " DAO that holds the Tokens"
  dao: DAO!

  " Block timestamp of the last update (transfer) for this token balance "
  lastUpdated: BigInt!
}

"""
DAO ERC20 Token balance.
"""
type ERC20Balance implements TokenBalance @entity {
  " Concatenation of DAO Smart contract address and Token Smart contract address using '_' "
  id: ID!

  " ERC20 token contract instance "
  token: ERC20Contract!

  " DAO that holds the ERC20 token "
  dao: DAO!

  " Amount of ERC20 tokens held by the DAO "
  balance: BigInt!

  " Block timestamp of the last update (transfer) for this token balance "
  lastUpdated: BigInt!
}

"""
DAO Native token balance, representing the amount of the blockchain's native currency
(e.g., Ether on Ethereum, MATIC on Polygon) held by the DAO.
"""
type NativeBalance implements TokenBalance @entity {
  " Concatenation of DAO Smart contract address and Token Smart contract address using '_' "
  id: ID!

  " DAO that holds the native tokens"
  dao: DAO!

  " Amount of native tokens held by the DAO "
  balance: BigInt!

  " Block timestamp of the last update (transfer) for this native token balance "
  lastUpdated: BigInt!
}

"""
DAO NFT balances. Inlcluding all Token IDs held by the DAO per ERC721 Token Smart Contract.
"""
type ERC721Balance implements TokenBalance @entity {
  " Concatenation of DAO Smart Contract address and ERC721 Token Smart Contract address using '_' "
  id: ID!

  " ERC721 Token Smart Contract instance "
  token: ERC721Contract!

  " DAO that holds the ERC721 tokens "
  dao: DAO!

  " NFTs from one ERC721 Contract held by the DAO "
  tokenIds: [BigInt!]!

  " Block timestamp of the last update (transfer) for this token balance "
  lastUpdated: BigInt!
}

"""
DAO ERC1155 Token balances. Including all Token IDs and it's amounts held by the DAO per ERC1155 Token Smart Contract.
"""
type ERC1155Balance implements TokenBalance @entity {
  " Concatenation of DAO Smart Contract address and ERC1155 Token Smart Contract address using '_' "
  id: ID!

  " ERC1155Contract instance"
  token: ERC1155Contract!

  " DAO that has tokens from a ERC1155 Token Smart Contract "
  dao: DAO!

  " Amount and related information of the DAO held tokens per ERC1155 Token Smart Contract "
  balances: [ERC1155TokenIdBalance!]! @derivedFrom(field: "balance")

  " URI of the ERC1155 Token Smart Contract "
  metadataUri: String!

  " Block timestamp of the last update (transfer) for this token balance "
  lastUpdated: BigInt!
}

"""
DAO token balance for each token within an ERC1155 Token Smart Contract
"""
type ERC1155TokenIdBalance @entity {
  # daoAddress_tokenAddress_tokenID"
  " Concatenation of DAO Smart Contract address, ERC1155 Token Smart Contract, and token ID using '_' "
  id: ID!

  #daoAddress+tokenAddress
  " One to Many relationship linking with ERC1155Balance entity "
  balance: ERC1155Balance!

  " ID for each different token in an ERC1155 Token Smart Contract "
  tokenId: BigInt!

  " Number of tokens held by the DAO per ERC1155 Token Smart Contract and token ID "
  amount: BigInt!

  " Block timestamp of the last update (transfer) for this token balance "
  lastUpdated: BigInt!
}

###########################
##### Token Transfers #####
###########################

enum TransferType {
  ExternalTransfer # when from/to are both NOT equal to DAO.
  Withdraw
  Deposit
}

interface TokenTransfer {
  id: ID!
  dao: DAO!
  from: Bytes!
  to: Bytes!
  type: TransferType!
  proposal: IProposal
  txHash: Bytes!
  createdAt: BigInt!
}

type ERC20Transfer implements TokenTransfer @entity(immutable: true) {
  id: ID!
  dao: DAO!
  token: Token!
  amount: BigInt!
  from: Bytes!
  to: Bytes!
  proposal: IProposal
  type: TransferType!
  txHash: Bytes!
  createdAt: BigInt!
}

type ERC721Transfer implements TokenTransfer @entity(immutable: true) {
  id: ID!
  dao: DAO!
  token: ERC721Contract!
  tokenId: BigInt!
  from: Bytes!
  to: Bytes!
  proposal: IProposal
  type: TransferType!
  txHash: Bytes!
  createdAt: BigInt!
}

type ERC1155Transfer implements TokenTransfer @entity(immutable: true) {
  id: ID!
  dao: DAO!
  token: ERC1155Contract!
  tokenId: BigInt!
  amount: BigInt!
  operator: Bytes!
  from: Bytes!
  to: Bytes!
  proposal: IProposal
  type: TransferType!
  txHash: Bytes!
  createdAt: BigInt!
}

type NativeTransfer implements TokenTransfer @entity(immutable: true) {
  id: ID!
  dao: DAO!
  amount: BigInt!
  from: Bytes!
  to: Bytes!
  reference: String!
  proposal: IProposal
  type: TransferType!
  txHash: Bytes!
  createdAt: BigInt!
}

# Executions

type Action @entity {
  id: ID!
  to: Bytes!
  value: BigInt!
  data: Bytes!
  dao: DAO!
  proposal: IProposal!
  execResult: Bytes
}

type StandardCallback @entity {
  id: ID!
  dao: DAO!
  interfaceId: Bytes!
  callbackSelector: Bytes!
  magicNumber: Bytes!
}

# DAO

type DAO @entity {
  id: ID! # use address as id
  subdomain: String
  creator: Bytes!
  DAOURI: String
  metadata: String
  createdAt: BigInt!
  token: ERC20Contract
  actions: [Action!]! @derivedFrom(field: "dao")
  transfers: [TokenTransfer!]! @derivedFrom(field: "dao")
  balances: [TokenBalance!]! @derivedFrom(field: "dao")
  permissions: [Permission!]! @derivedFrom(field: "dao")
  proposals: [IProposal!]! @derivedFrom(field: "dao")
  trustedForwarder: Bytes
  signatureValidator: Bytes
  standardCallbacks: [StandardCallback!]! @derivedFrom(field: "dao")

  plugins: [PluginInstallation!]! @derivedFrom(field: "dao")
}

# ACL

# Cannot be immutable because a permission can be revoked and granted in the same TX.
# This results in an error in the subgraph if the entity is immutable.
# No need to store granted as we can delete permission when revoked
type Permission @entity {
  id: ID! # emitting contract Address (DAO or PluginRepo) + permissionId + where + who
  where: Bytes!
  permissionId: Bytes!
  who: Bytes!
  actor: Bytes!
  condition: Bytes

  # The following attributes is used to create
  # one-to-many between DAO or PluginRepo to Permission
  dao: DAO
  pluginRepo: PluginRepo
}

# Plugins

type PluginRepo @entity(immutable: true) {
  id: ID! # address
  subdomain: String!
  releases: [PluginRelease!]! @derivedFrom(field: "pluginRepo")
  # Holds all preparations. Also applied ones.
  preparations: [PluginPreparation!]! @derivedFrom(field: "pluginRepo")
  # Holds all installed and uninstalled installations.
  installations: [PluginInstallation!] @derivedFrom(field: "appliedPluginRepo")

  permissions: [Permission!]! @derivedFrom(field: "pluginRepo")
}

type PluginSetup @entity(immutable: true) {
  id: ID! # contract address
  versions: [PluginVersion!]! @derivedFrom(field: "pluginSetup")
}

type PluginRelease @entity {
  id: ID! # pluginRepo + release
  pluginRepo: PluginRepo!
  release: Int!
  metadata: String! # release metadata
  builds: [PluginVersion!]! @derivedFrom(field: "release")
}

type PluginVersion @entity(immutable: true) {
  id: ID! # pluginRepo + release + build
  pluginRepo: PluginRepo!
  pluginSetup: PluginSetup

  release: PluginRelease!
  build: Int!

  metadata: String! # build metadata
  # Holds all preparations. Also applied ones.
  preparations: [PluginPreparation!]! @derivedFrom(field: "pluginVersion")
  # Holds all installed and uninstalled installations.
  installations: [PluginInstallation!] @derivedFrom(field: "appliedVersion")
}

type PluginPermission @entity(immutable: true) {
  id: ID! # PluginPreparation + operation + where + who + permissionId
  pluginPreparation: PluginPreparation!
  operation: PermissionOperation!
  where: Bytes!
  who: Bytes!
  condition: Bytes
  permissionId: Bytes!
}

enum PermissionOperation {
  Grant
  Revoke
  GrantWithCondition
}

type PluginPreparation @entity(immutable: true) {
  id: ID! # psp setupId + installationId
  installation: PluginInstallation!
  creator: Bytes!
  dao: DAO!
  preparedSetupId: Bytes! # the psp setupId
  pluginRepo: PluginRepo!
  pluginVersion: PluginVersion!
  data: Bytes
  pluginAddress: Bytes!
  helpers: [Bytes!]!
  permissions: [PluginPermission!]! @derivedFrom(field: "pluginPreparation")
  type: PluginPreparationType!
}

# Don't implement IPlugin. Otherwise it would show up under plugins in the DAO entity
type PluginInstallation @entity {
  id: ID! # psp installationId
  dao: DAO!
  plugin: IPlugin # The plugin address as id provided by the applied preparation
  appliedPreparation: PluginPreparation
  appliedSetupId: Bytes # The setupId of the application see PSP documentation for more info
  appliedVersion: PluginVersion # Stored to track installations in the different plugin versions
  appliedPluginRepo: PluginRepo # Stored to track installation in the different plugin repos
  preparations: [PluginPreparation!]! @derivedFrom(field: "installation")
  state: PluginPreparationState!
}

enum PluginPreparationType {
  Installation
  Update
  Uninstallation
}

enum PluginPreparationState {
  InstallationPrepared
  Installed
  UpdatePrepared
  UninstallPrepared
  Uninstalled
}

interface IPlugin {
  id: ID! # plugin address
  dao: DAO!
  pluginAddress: Bytes!

  installations: [PluginInstallation!]! @derivedFrom(field: "plugin")

  # TODO: Uncomment as soon as the plugins have their own subgraph
  # appliedPreparation: PluginPreparation
  # appliedSetupId: Bytes # The setupId of the application see PSP documentation for more info
  # preparations: [PluginPreparation!]! @derivedFrom(field: "plugin")
  # state: PluginPreparationState!
}

### Entities below should move to there respective subgraph once plugin is seperated from the Aragon OSx
# Proposal

interface IProposal {
  id: ID! # package + proposalId
  dao: DAO!
  creator: Bytes!
  metadata: String
  actions: [Action!]! @derivedFrom(field: "proposal")
  allowFailureMap: BigInt!
  failureMap: BigInt
  executed: Boolean!
  createdAt: BigInt!
  startDate: BigInt!
  endDate: BigInt!
  executionTxHash: Bytes
}

type TransactionActionsProposal implements IProposal @entity {
  id: ID!
  dao: DAO!
  creator: Bytes!
  metadata: String
  actions: [Action!]! @derivedFrom(field: "proposal")
  allowFailureMap: BigInt!
  failureMap: BigInt
  executed: Boolean!
  createdAt: BigInt!
  startDate: BigInt!
  endDate: BigInt!
  executionTxHash: Bytes
}

# Voting

enum VoteOption {
  None
  Abstain
  Yes
  No
}

enum VotingMode {
  Standard
  EarlyExecution
  VoteReplacement
}

# TokenVoting

type TokenVotingPlugin implements IPlugin @entity {
  "TODO: attributes should be appended to Plugins once plugin is separated from Aragon OSx"
  id: ID!
  dao: DAO!
  pluginAddress: Bytes!

  installations: [PluginInstallation!]! @derivedFrom(field: "plugin")

  proposals: [TokenVotingProposal!]! @derivedFrom(field: "plugin")
  votingMode: VotingMode
  supportThreshold: BigInt
  minParticipation: BigInt
  minDuration: BigInt
  minProposerVotingPower: BigInt
  proposalCount: BigInt!
  token: Token
  members: [TokenVotingMember!]! @derivedFrom(field: "plugin")
}

type TokenVotingMember @entity {
  id: ID! # user address + TokenVotingPlugin pluginId.
  address: Bytes!
  balance: BigInt!
  plugin: TokenVotingPlugin!

  # delegates
  delegatee: TokenVotingMember
  votingPower: BigInt
  # we assume token owners and/or delegatees are members
  delegators: [TokenVotingMember!]! @derivedFrom(field: "delegatee")
}

type TokenVotingVoter @entity {
  id: ID! # address
  address: String! # address as string to facilitate filtering by address on the UI
  proposals: [TokenVotingVote!]! @derivedFrom(field: "voter")
  plugin: TokenVotingPlugin!
  lastUpdated: BigInt
}

type TokenVotingVote @entity {
  "VoterProposal for Many-to-Many"
  id: ID! # voter + proposal
  voter: TokenVotingVoter!
  proposal: TokenVotingProposal!
  voteOption: VoteOption!
  votingPower: BigInt!
  createdAt: BigInt!
  voteReplaced: Boolean!
  updatedAt: BigInt!
}

type TokenVotingProposal implements IProposal @entity {
  id: ID! # package + proposalId
  dao: DAO!
  actions: [Action!]! @derivedFrom(field: "proposal")
  allowFailureMap: BigInt!
  failureMap: BigInt
  plugin: TokenVotingPlugin!
  pluginProposalId: BigInt!
  creator: Bytes!
  metadata: String

  votingMode: VotingMode!
  supportThreshold: BigInt!
  minVotingPower: BigInt!
  snapshotBlock: BigInt!

  yes: BigInt
  no: BigInt
  abstain: BigInt
  castedVotingPower: BigInt
  totalVotingPower: BigInt!

  voters: [TokenVotingVote!]! @derivedFrom(field: "proposal")
  open: Boolean!
  executed: Boolean!
  createdAt: BigInt!
  startDate: BigInt!
  endDate: BigInt!
  creationBlockNumber: BigInt!
  approvalReached: Boolean!
  isSignaling: Boolean!
  earlyExecutable: Boolean
  executionDate: BigInt
  executionBlockNumber: BigInt
  executionTxHash: Bytes
}

# AddresslistVoting

type AddresslistVotingPlugin implements IPlugin @entity {
  "TODO: attributes should be appended to Plugin once plugin is seperated from Aragon OSx"
  id: ID!
  dao: DAO!
  pluginAddress: Bytes!

  installations: [PluginInstallation!]! @derivedFrom(field: "plugin")

  proposals: [AddresslistVotingProposal!]! @derivedFrom(field: "plugin")
  votingMode: VotingMode
  supportThreshold: BigInt
  minParticipation: BigInt
  minDuration: BigInt
  minProposerVotingPower: BigInt
  proposalCount: BigInt
  members: [AddresslistVotingVoter!]! @derivedFrom(field: "plugin")
}

type AddresslistVotingVoter @entity {
  id: ID! # address
  address: String # address as string to facilitate filtering by address on the UI
  proposals: [AddresslistVotingVote!]! @derivedFrom(field: "voter")
  plugin: AddresslistVotingPlugin!
}

type AddresslistVotingVote @entity {
  "VoterProposal for Many-to-Many"
  id: ID! # voter + proposal
  voter: AddresslistVotingVoter!
  proposal: AddresslistVotingProposal!
  voteOption: VoteOption!
  votingPower: BigInt!
  createdAt: BigInt!
  voteReplaced: Boolean!
  updatedAt: BigInt!
}

type AddresslistVotingProposal implements IProposal @entity {
  id: ID! # package + proposalId
  dao: DAO!
  actions: [Action!]! @derivedFrom(field: "proposal")
  allowFailureMap: BigInt!
  failureMap: BigInt
  plugin: AddresslistVotingPlugin!
  pluginProposalId: BigInt!
  creator: Bytes!
  metadata: String

  votingMode: VotingMode!
  supportThreshold: BigInt!
  minVotingPower: BigInt!
  snapshotBlock: BigInt!

  abstain: BigInt
  yes: BigInt
  no: BigInt
  castedVotingPower: BigInt
  totalVotingPower: BigInt!

  voters: [AddresslistVotingVote!]! @derivedFrom(field: "proposal")
  open: Boolean!
  executed: Boolean!
  createdAt: BigInt!
  startDate: BigInt!
  endDate: BigInt!
  creationBlockNumber: BigInt!
  approvalReached: Boolean!
  isSignaling: Boolean!
  earlyExecutable: Boolean
  executionDate: BigInt
  executionBlockNumber: BigInt
  executionTxHash: Bytes
}

# Admin (plugin)

type AdminPlugin implements IPlugin @entity {
  "TODO: attributes should be appended to Plugin once plugin is separated from Aragon OSx"
  id: ID!
  dao: DAO!
  pluginAddress: Bytes!

  installations: [PluginInstallation!]! @derivedFrom(field: "plugin")

  proposals: [AdminProposal!]! @derivedFrom(field: "plugin")
  administrators: [AdministratorAdminPlugin!]! @derivedFrom(field: "plugin")
}

type Administrator @entity(immutable: true) {
  id: ID! # address
  address: String # address as string to facilitate filtering by address on the UI
  proposals: [AdminProposal!]! @derivedFrom(field: "administrator")
  plugins: [AdministratorAdminPlugin!]! @derivedFrom(field: "administrator")
}

type AdministratorAdminPlugin @entity {
  "for Many-to-Many"
  id: ID! # Administrator + plugin
  administrator: Administrator!
  plugin: AdminPlugin!
}

type AdminProposal implements IProposal @entity {
  id: ID! # plugin + proposalId
  dao: DAO!
  creator: Bytes! # Administrator address
  metadata: String
  actions: [Action!]! @derivedFrom(field: "proposal")
  allowFailureMap: BigInt!
  failureMap: BigInt
  executed: Boolean!
  createdAt: BigInt!
  startDate: BigInt!
  endDate: BigInt!
  plugin: AdminPlugin!
  pluginProposalId: BigInt!
  administrator: Administrator!
  executionTxHash: Bytes
}

# Multisig

type MultisigPlugin implements IPlugin @entity {
  "TODO: attributes should be appended to Plugin once plugin is seperated from Aragon OSx"
  id: ID!
  dao: DAO!
  pluginAddress: Bytes!

  installations: [PluginInstallation!]! @derivedFrom(field: "plugin")

  proposalCount: BigInt
  proposals: [MultisigProposal!]! @derivedFrom(field: "plugin")
  members: [MultisigApprover!]! @derivedFrom(field: "plugin")

  # multisig settings
  minApprovals: Int
  onlyListed: Boolean
}

type MultisigApprover @entity {
  id: ID! # plugin_address + member_address
  address: String # address as string to facilitate filtering by address on the UI
  proposals: [MultisigProposalApprover!]! @derivedFrom(field: "approver")
  plugin: MultisigPlugin!
}

type MultisigProposalApprover @entity(immutable: true) {
  "ApproverProposal for Many-to-Many"
  id: ID! # approver + proposal
  approver: MultisigApprover!
  proposal: MultisigProposal!
  createdAt: BigInt!
}

type MultisigProposal implements IProposal @entity {
  id: ID! # plugin + proposalId
  dao: DAO!
  actions: [Action!]! @derivedFrom(field: "proposal")
  allowFailureMap: BigInt!
  failureMap: BigInt
  plugin: MultisigPlugin!
  pluginProposalId: BigInt!
  creator: Bytes!
  metadata: String
  createdAt: BigInt!
  startDate: BigInt!
  endDate: BigInt!
  creationBlockNumber: BigInt!
  snapshotBlock: BigInt!
  minApprovals: Int!
  approvals: Int
  approvalReached: Boolean!
  isSignaling: Boolean!
  executed: Boolean!
  executionDate: BigInt
  executionBlockNumber: BigInt
  executionTxHash: Bytes
  approvers: [MultisigProposalApprover!]! @derivedFrom(field: "proposal")
}
