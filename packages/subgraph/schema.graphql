# Types

# Token

type ERC20Token @entity(immutable: true) {
  id: ID! # use address as id
  name: String
  symbol: String
  decimals: BigInt
}

type Balance @entity {
  id: ID! # token address + dao address
  token: ERC20Token! # address(0) corresponds to the native token
  dao: Dao!
  balance: BigInt!
  lastUpdated: BigInt!
}

# Dao

# ACL

type ContractPermissionId @entity(immutable: true) {
  id: ID! # where + permissionId
  dao: Dao!
  where: Bytes!
  permissionId: Bytes!
  frozen: Boolean!
}

type Permission @entity(immutable: true) {
  "no need to store granted as we can delete permission when revoked"
  id: ID! # where + permissionId + who
  dao: Dao!
  where: Bytes!
  contractPermissionId: ContractPermissionId!
  who: Bytes!
  actor: Bytes!
  oracle: Bytes
}

# Executions

type Action @entity(immutable: true) {
  id: ID!
  to: Bytes!
  value: BigInt!
  data: Bytes!
  dao: Dao!
  proposal: Proposal!
  execResult: Bytes
}

# Treasury

enum TransferType {
  Withdraw
  Deposit
}

type VaultTransfer @entity(immutable: true) {
  id: ID!
  dao: Dao!
  token: ERC20Token
  sender: Bytes
  to: Bytes
  amount: BigInt!
  reference: String!
  transaction: String!
  proposal: Proposal
  createdAt: BigInt!
  type: TransferType!
}

type StandardCallback @entity {
  id: ID!
  dao: Dao!
  interfaceId: Bytes!
  callbackSelector: Bytes!
  magicNumber: Bytes!
}

# Dao

type Dao @entity {
  id: ID! # use address as id
  name: String
  creator: Bytes!
  metadata: String
  createdAt: BigInt!
  token: ERC20Token
  actions: [Action!]! @derivedFrom(field: "dao")
  transfers: [VaultTransfer!]! @derivedFrom(field: "dao")
  balances: [Balance!] @derivedFrom(field: "dao")
  contractPermissionIds: [ContractPermissionId!]! @derivedFrom(field: "dao")
  permissions: [Permission!]! @derivedFrom(field: "dao")
  plugins: [DaoPlugin!] @derivedFrom(field: "dao")
  proposals: [Proposal!] @derivedFrom(field: "dao")
  "TODO: remove or rename to `plugins` once plugins are seperated from the core"
  corePlugins: [Plugin!] @derivedFrom(field: "dao")
  trustedForwarder: Bytes
  signatureValidator: Bytes
  standardCallbacks: [StandardCallback!] @derivedFrom(field: "dao")
}

# Plugins

type PluginSetup @entity(immutable: true) {
  id: ID! # contract address
  versions: [PluginVersion!]! @derivedFrom(field: "pluginSetup")
  installations: [Plugin!]! @derivedFrom(field: "pluginSetup")
}

type PluginVersion @entity(immutable: true) {
  id: ID! # pluginRepo + version index
  pluginRepo: PluginRepo!
  semanticVersion: [BigInt!]!
  pluginSetup: PluginSetup!
  contentURI: Bytes!
}

type PluginRepo @entity(immutable: true) {
  id: ID! # address
  name: String!
  versions: [PluginVersion!]! @derivedFrom(field: "pluginRepo")
}

type PluginHelper @entity(immutable: true) {
  id: ID! # address
  plugin: Plugin!
}

type Plugin @entity {
  "TODO: should do `implements IPlugin` once plugin is seperated from core"
  id: ID! # address
  dao: Dao!
  pluginSetup: PluginSetup!
  data: Bytes!
  helpers: [PluginHelper!]! @derivedFrom(field: "plugin")
  state: PluginState!
  sender: String!
}

enum PluginState {
  InstallationPrepared
  Installed
  UpdatePrepared
  UninstallPrepared
  Uninstalled
}

type DaoPlugin @entity {
  id: ID! # Dao + Plugin
  plugin: IPlugin!
  dao: Dao!
}

interface IPlugin {
  id: ID! # address
  daos: [DaoPlugin!] @derivedFrom(field: "plugin")
}

### Entities below should move to there respective subgraph once plugin is seperated from core
# Proposal

interface Proposal {
  id: ID! # package + voteId
  dao: Dao!
  creator: Bytes!
  metadata: String
  actions: [Action!]! @derivedFrom(field: "proposal")
  executed: Boolean!
  createdAt: BigInt!
}

# Voting

enum VoteOption {
  None
  Abstain
  Yes
  No
}

# ERC20Voting

type ERC20VotingPlugin implements IPlugin @entity {
  "TODO: attributes should be appended to Plugins once plugin is seperated from core"
  id: ID!
  daos: [DaoPlugin!] @derivedFrom(field: "plugin")
  proposals: [ERC20VotingProposal!]! @derivedFrom(field: "plugin")
  relativeSupportThresholdPct: BigInt
  totalSupportThresholdPct: BigInt
  minDuration: BigInt
  votesLength: BigInt
  token: ERC20Token
  members: [ERC20VotingVoter!]! @derivedFrom(field: "plugin")
}

type ERC20VotingVoter @entity {
  id: ID! # address
  address: String # address as string to facilitate filtering by address on the UI
  proposals: [ERC20Vote!]! @derivedFrom(field: "voter")
  plugin: ERC20VotingPlugin!
  lastUpdated: BigInt
}

type ERC20Vote @entity {
  "VoterProposal for Many-to-Many"
  id: ID! # voter + proposal
  voter: ERC20VotingVoter!
  proposal: ERC20VotingProposal!
  vote: VoteOption!
  weight: BigInt!
  createdAt: BigInt!
}

type ERC20VotingProposal implements Proposal @entity {
  id: ID! # package + voteId
  dao: Dao!
  actions: [Action!]! @derivedFrom(field: "proposal")
  plugin: ERC20VotingPlugin!
  voteId: BigInt!
  creator: Bytes!
  metadata: String
  startDate: BigInt!
  endDate: BigInt!
  snapshotBlock: BigInt!
  relativeSupportThresholdPct: BigInt!
  totalSupportThresholdPct: BigInt!
  yes: BigInt
  no: BigInt
  abstain: BigInt
  voteCount: BigInt
  census: BigInt!
  voters: [ERC20Vote!]! @derivedFrom(field: "proposal")
  open: Boolean!
  executed: Boolean!
  createdAt: BigInt!
  executable: Boolean
}

# Addresslist

type AddresslistPlugin implements IPlugin @entity {
  "TODO: attributes should be appended to Plugin once plugin is seperated from core"
  id: ID!
  daos: [DaoPlugin!] @derivedFrom(field: "plugin")
  proposals: [AddresslistProposal!]! @derivedFrom(field: "plugin")
  relativeSupportThresholdPct: BigInt
  totalSupportThresholdPct: BigInt
  minDuration: BigInt
  votesLength: BigInt
  members: [AddresslistVoter!]! @derivedFrom(field: "plugin")
}

type AddresslistVoter @entity {
  id: ID! # address
  address: String # address as string to facilitate filtering by address on the UI
  proposals: [AddresslistVote!]! @derivedFrom(field: "voter")
  plugin: AddresslistPlugin!
}

type AddresslistVote @entity {
  "VoterProposal for Many-to-Many"
  id: ID! # voter + proposal
  voter: AddresslistVoter!
  proposal: AddresslistProposal!
  vote: VoteOption!
  weight: BigInt!
  createdAt: BigInt!
}

type AddresslistProposal implements Proposal @entity {
  id: ID! # package + voteId
  dao: Dao!
  actions: [Action!]! @derivedFrom(field: "proposal")
  plugin: AddresslistPlugin!
  voteId: BigInt!
  creator: Bytes!
  metadata: String
  startDate: BigInt!
  endDate: BigInt!
  snapshotBlock: BigInt!
  relativeSupportThresholdPct: BigInt!
  totalSupportThresholdPct: BigInt!
  census: BigInt!
  yes: BigInt
  no: BigInt
  abstain: BigInt
  voteCount: BigInt
  voters: [AddresslistVote!]! @derivedFrom(field: "proposal")
  open: Boolean!
  executed: Boolean!
  createdAt: BigInt!
  executable: Boolean
}
